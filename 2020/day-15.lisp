(uiop:define-package #:com.andrewsoutar.aoc/2020/day-15
  (:use #:cl #:com.andrewsoutar.aoc/lib)
  (:export #:part1 #:part2))
(in-package #:com.andrewsoutar.aoc/2020/day-15)
(in-readtable aoc)

(defun parse-input (input)
  (mapcar #'parse-integer (split #?/,/ input)))

(defun part1 (input &optional (n 2020))
  (let* ((age 0) (table (make-hash-table :test 'eql))
         (nums (parse-input input)) (last-num (pop nums)))
    (iter (for num in (parse-input input))
      (setf (gethash last-num table) (incf age)
            last-num num))
    (iter (until (= age n))
      (let ((num (if-let (last-age (gethash last-num table))
                   (- (1+ age) last-age)
                   0)))
        (setf (gethash last-num table) (incf age)
              last-num num)))
    last-num))

(defun part2 (input &optional (n 30000000))
  (let* ((age 0) (table (sb-alien:make-alien sb-alien:int n))
         (nums (parse-input input)) (last-num (pop nums)))
    (iter (for num in (parse-input input))
      (setf (sb-alien:deref table last-num) (incf age)
            last-num num))
    (iter (until (= age n))
      (let ((num (let ((last-age (sb-alien:deref table last-num)))
                   (if (zerop last-age) 0 (- (1+ age) last-age)))))
        (setf (sb-alien:deref table last-num) (incf age)
              last-num num)))
    last-num))
